document.addEventListener('DOMContentLoaded', () => {
    const app = {
        state: { ingredients: [], recipes: [], plannerDate: new Date().toISOString().split('T')[0], mealPlan: [], currentView: 'recipes' },
        elements: {},
        colorThief: new ColorThief(),
        api: { async get(url) { return (await fetch(url)).json(); }, async send(url, method, body) { const isFormData = body instanceof FormData; const headers = isFormData ? {} : { 'Content-Type': 'application/json' }; const res = await fetch(url, { method, headers, body: isFormData ? body : JSON.stringify(body) }); if (!res.ok) { const err = await res.json(); alert(`Error: ${err.error}`); throw new Error(err.error); } return res.json(); }, },
        init() {
            this.elements = {
                viewTitle: document.getElementById('view-title'), main: document.getElementById('app-main'), nav: document.getElementById('app-nav'), modalContainer: document.getElementById('modal-container'), modalBody: document.getElementById('modal-body'), modalCloseBtn: document.getElementById('modal-close-btn'), centralAddBtn: document.getElementById('central-add-btn'),
            };
            this.elements.nav.addEventListener('click', e => { const navBtn = e.target.closest('.nav-btn'); if (navBtn) this.navigateTo(navBtn.dataset.view); });
            this.elements.centralAddBtn.addEventListener('click', () => { if (this.state.currentView === 'recipes') this.showAddEditRecipeModal(); if (this.state.currentView === 'ingredients') this.showAddEditIngredientModal(); });
            this.elements.modalCloseBtn.addEventListener('click', () => this.closeModal());
            this.elements.modalContainer.addEventListener('click', e => { if (e.target === this.elements.modalContainer) this.closeModal() });
            this.navigateTo('recipes');
        },
        async navigateTo(view) { this.state.currentView = view; await this.fetchData(); this.render(); },
        async fetchData() { [this.state.ingredients, this.state.recipes] = await Promise.all([this.api.get('/api/ingredients'), this.api.get('/api/recipes')]); if (this.state.currentView === 'planner') await this.fetchMealPlan(); },
        async fetchMealPlan() { this.state.mealPlan = await this.api.get(`/api/meal-planner/${this.state.plannerDate}`); },
        render() {
            const view = this.state.currentView;
            this.elements.nav.querySelectorAll('.nav-btn').forEach(btn => btn.classList.toggle('active', btn.dataset.view === view));
            this.elements.viewTitle.textContent = view.charAt(0).toUpperCase() + view.slice(1);
            this.elements.centralAddBtn.style.display = (view === 'planner') ? 'none' : 'flex';
            const renderMethod = `render${view.charAt(0).toUpperCase() + view.slice(1)}View`;
            if (this[renderMethod]) this[renderMethod]();
        },
        renderRecipesView() { this.elements.main.innerHTML = `<div class="grid-container recipe-grid">${this.state.recipes.map((r, i) => this.getRecipeCardHTML(r, `card-${i}`)).join('')}</div>`; this.addCardEventListeners(); this.state.recipes.forEach((r, i) => this.updateCardTheme(r.image_url, document.getElementById(`card-${i}`))); },
        renderIngredientsView() { this.elements.main.innerHTML = `<div class="grid-container ingredient-grid">${this.state.ingredients.map((ing, i) => this.getIngredientCardHTML(ing, `card-${i}`)).join('')}</div>`; this.addCardEventListeners(); this.state.ingredients.forEach((ing, i) => this.updateCardTheme(ing.image_url, document.getElementById(`card-${i}`))); },
        getRecipeCardHTML(recipe, cardId) { const totals = this.calculateRecipeTotals(recipe.ingredients); return `<div class="card recipe-card" id="${cardId}" data-id="${recipe.id}"><div class="card-actions"><button class="card-action-btn edit-btn"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg></button><button class="card-action-btn delete-btn"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg></button></div><img src="${recipe.image_url || 'placeholder.png'}" alt="${recipe.name}"><div class="card-content"><h3>${recipe.name}</h3><div class="stats-grid"><div class="stat-item calories"><div class="stat-value">${totals.calories.toFixed(0)}</div><div class="stat-label"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10zM9 12l2-3 2 3h-4z"></path></svg>KCAL</div></div><div class="stat-item protein"><div class="stat-value">${totals.protein.toFixed(1)}<span>g</span></div><div class="stat-label"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M20.42 4.58a5.4 5.4 0 0 0-7.64 0l-1.78 1.78-1.78-1.78a5.4 5.4 0 0 0-7.64 0 5.4 5.4 0 0 0 0 7.64l1.78 1.78 7.64 7.64 7.64-7.64 1.78-1.78a5.4 5.4 0 0 0 0-7.64z"></path></svg>Protein</div></div><div class="stat-item carbs"><div class="stat-value">${totals.carbs.toFixed(1)}<span>g</span></div><div class="stat-label"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path></svg>Carbs</div></div><div class="stat-item fat"><div class="stat-value">${totals.fat.toFixed(1)}<span>g</span></div><div class="stat-label"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M21.21 15.89A10 10 0 1 1 8.11 2.79"></path><path d="M22 12A10 10 0 0 0 12 2v10z"></path></svg>Fat</div></div><div class="stat-item cost"><div class="stat-value">₹${totals.cost.toFixed(2)}</div><div class="stat-label"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>Total Cost</div></div></div></div></div>`; },
        getIngredientCardHTML(ing, cardId) { return `<div class="card ingredient-card" id="${cardId}" data-id="${ing.id}"><div class="card-actions"><button class="card-action-btn edit-btn"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg></button><button class="card-action-btn delete-btn"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg></button></div><img src="${ing.image_url || 'placeholder.png'}" alt="${ing.name}"><div class="card-content"><h3>${ing.name}</h3><div class="stats-grid"><div class="stat-item calories"><div class="stat-value">${(ing.calories || 0).toFixed(0)}</div><div class="stat-label"><svg viewBox="0 0 24 24"><path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10zM9 12l2-3 2 3h-4z"></path></svg>KCAL</div></div><div class="stat-item protein"><div class="stat-value">${(ing.protein || 0).toFixed(1)}<span>g</span></div><div class="stat-label"><svg viewBox="0 0 24 24"><path d="M20.42 4.58a5.4 5.4 0 0 0-7.64 0l-1.78 1.78-1.78-1.78a5.4 5.4 0 0 0-7.64 0 5.4 5.4 0 0 0 0 7.64l1.78 1.78 7.64 7.64 7.64-7.64 1.78-1.78a5.4 5.4 0 0 0 0-7.64z"></path></svg>Protein</div></div><div class="stat-item carbs"><div class="stat-value">${(ing.carbs || 0).toFixed(1)}<span>g</span></div><div class="stat-label"><svg viewBox="0 0 24 24"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path></svg>Carbs</div></div><div class="stat-item fat"><div class="stat-value">${(ing.fat || 0).toFixed(1)}<span>g</span></div><div class="stat-label"><svg viewBox="0 0 24 24"><path d="M21.21 15.89A10 10 0 1 1 8.11 2.79"></path><path d="M22 12A10 10 0 0 0 12 2v10z"></path></svg>Fat</div></div><div class="stat-item cost"><div class="stat-value">₹${(ing.price || 0).toFixed(2)}</div><div class="stat-label"><svg viewBox="0 0 24 24"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>/ 100g</div></div></div></div></div>`; },
        showAddEditIngredientModal(ing = {}) { const isEdit = !!ing.id; this.showModal(`<h2>${isEdit ? 'Edit' : 'Add'} Ingredient</h2><form id="ingredient-form" enctype="multipart/form-data"><div class="form-grid"><div class="input-group"><label>Name</label><input type="text" name="name" value="${ing.name || ''}" required></div><div class="input-group"><label>Category</label><input type="text" name="category" value="${ing.category || ''}"></div></div><div class="input-group"><label>${isEdit ? 'Replace' : 'Add'} Image</label><input type="file" name="image" accept="image/*"></div><div class="form-grid"><div class="input-group"><label>Calories (/100g)</label><input type="number" name="calories" step="0.1" value="${ing.calories || 0}" required></div><div class="input-group"><label>Protein (g)</label><input type="number" name="protein" step="0.1" value="${ing.protein || 0}" required></div><div class="input-group"><label>Carbs (g)</label><input type="number" name="carbs" step="0.1" value="${ing.carbs || 0}" required></div><div class="input-group"><label>Fat (g)</label><input type="number" name="fat" step="0.1" value="${ing.fat || 0}" required></div></div><div class="input-group"><label>Price (₹)</label><input type="number" name="price" step="0.01" value="${ing.price || 0}" required></div><button type="submit" class="button">Save</button></form>`); document.getElementById('ingredient-form').addEventListener('submit', async e => { e.preventDefault(); const url = isEdit ? `/api/ingredients/${ing.id}` : '/api/ingredients'; await this.api.send(url, isEdit ? 'PUT' : 'POST', new FormData(e.target)); this.closeModal(); this.navigateTo('ingredients'); }); },
        showAddEditRecipeModal(recipe = {}) { const isEdit = !!recipe.id; let recipeIngredients = recipe.ingredients ? JSON.parse(JSON.stringify(recipe.ingredients)) : []; const updateIngredientList = () => { document.getElementById('recipe-ingredients-list-modal').innerHTML = recipeIngredients.map((item, index) => { const ingData = this.state.ingredients.find(i => i.id === item.id); return `<div><span>${ingData?.name || 'Unknown'} - ${item.quantity || item.quantity_grams}g</span><button type="button" class="remove-ing-btn" data-index="${index}">&times;</button></div>`; }).join(''); document.querySelectorAll('.remove-ing-btn').forEach(btn => btn.addEventListener('click', e => { recipeIngredients.splice(e.target.dataset.index, 1); updateIngredientList(); })); }; this.showModal(`<h2>${isEdit ? 'Edit' : 'Add'} Recipe</h2><form id="recipe-form" class="form-grid"><div><div class="input-group"><label>Name</label><input type="text" name="name" value="${recipe.name || ''}" required></div><div class="input-group"><label>Instructions</label><textarea name="instructions" rows="8">${recipe.instructions || ''}</textarea></div><div class="input-group"><label>${isEdit ? 'Replace' : 'Add'} Image</label><input type="file" name="image" accept="image/*"></div><button type="submit" class="button">Save Recipe</button></div><div><h3>Ingredients</h3><div class="input-group" style="display: flex; gap: 0.5rem; align-items: flex-end;"><div style="flex-grow: 1;"><label>Add Ingredient</label><select id="ingredient-select-modal"><option value="">-- Select --</option>${this.state.ingredients.map(i => `<option value="${i.id}">${i.name}</option>`).join('')}</select></div><div style="width: 80px;"><input id="ingredient-qty-modal" type="number" placeholder="Grams"></div><button type="button" id="add-ing-to-recipe-btn" class="button">Add</button></div><div id="recipe-ingredients-list-modal"></div></div></form>`); updateIngredientList(); document.getElementById('add-ing-to-recipe-btn').addEventListener('click', () => { const id = parseInt(document.getElementById('ingredient-select-modal').value); const quantity = parseFloat(document.getElementById('ingredient-qty-modal').value); if (id && quantity > 0 && !recipeIngredients.some(i => i.id === id)) { recipeIngredients.push({ id, quantity }); updateIngredientList(); } }); document.getElementById('recipe-form').addEventListener('submit', async e => { e.preventDefault(); const formData = new FormData(); if (e.target.image.files[0]) formData.append('image', e.target.image.files[0]); formData.append('recipeData', JSON.stringify({ name: e.target.name.value, instructions: e.target.instructions.value, ingredients: recipeIngredients })); await this.api.send(isEdit ? `/api/recipes/${recipe.id}` : '/api/recipes', isEdit ? 'PUT' : 'POST', formData); this.closeModal(); this.navigateTo('recipes'); }); },
        // --- Other functions are unchanged and included for completeness ---
        addCardEventListeners() { this.elements.main.querySelectorAll('.edit-btn').forEach(btn => btn.addEventListener('click', e => { e.stopPropagation(); const id = e.target.closest('.card').dataset.id; if (this.state.currentView === 'recipes') this.showAddEditRecipeModal(this.state.recipes.find(r => r.id == id)); else this.showAddEditIngredientModal(this.state.ingredients.find(i => i.id == id)); })); this.elements.main.querySelectorAll('.delete-btn').forEach(btn => btn.addEventListener('click', async e => { e.stopPropagation(); if (!confirm('Are you sure you want to delete this item?')) return; const id = e.target.closest('.card').dataset.id; await this.api.send(`/api/${this.state.currentView}/${id}`, 'DELETE'); this.navigateTo(this.state.currentView); })); },
        showModal(content) { this.elements.modalBody.innerHTML = content; this.elements.modalContainer.classList.remove('hidden'); },
        closeModal() { this.elements.modalContainer.classList.add('hidden'); },
        renderPlannerView() { this.elements.main.innerHTML = `<div class="planner-date-header"><div class="date-scroller-container"><div class="date-scroller"></div></div><div class="planner-today-link"><a href="#" id="today-btn">Go to Today</a></div></div><div id="daily-totals"></div><div class="planner-grid">${['Breakfast', 'Lunch', 'Dinner', 'Snacks'].map(meal => `<div class="meal-section"><div class="meal-header"><h2>${meal}</h2><button class="button add-meal-item-btn" data-meal="${meal}">+ Add</button></div><div id="meal-${meal.toLowerCase()}" class="meal-items"></div></div>`).join('')}</div>`; this.renderDateScroller(); this.renderPlannerItemsAndTotals(); document.getElementById('today-btn').addEventListener('click', (e) => { e.preventDefault(); this.changePlannerDate(null, true); }); document.querySelectorAll('.add-meal-item-btn').forEach(btn => btn.addEventListener('click', () => this.showAddItemToMealModal(btn.dataset.meal))); document.querySelector('.date-scroller').addEventListener('click', e => { const dateItem = e.target.closest('.date-item'); if (dateItem) this.changePlannerDate(dateItem.dataset.date); }); },
        renderDateScroller() { const scroller = document.querySelector('.date-scroller'); let content = ''; const selected = new Date(this.state.plannerDate + 'T12:00:00'); for (let i = -7; i <= 14; i++) { const date = new Date(selected); date.setDate(date.getDate() + i); const dateString = date.toISOString().split('T')[0]; const day = date.toLocaleDateString(undefined, { weekday: 'short' }); const number = date.getDate(); const isActive = dateString === this.state.plannerDate; content += `<div class="date-item ${isActive ? 'active' : ''}" data-date="${dateString}"><div class="date-day">${day}</div><div class="date-number">${number}</div></div>`; } scroller.innerHTML = content; const activeEl = scroller.querySelector('.active'); if (activeEl) activeEl.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' }); },
        async changePlannerDate(newDate, goToday = false) { if (goToday) { this.state.plannerDate = new Date().toISOString().split('T')[0]; } else if (newDate) { this.state.plannerDate = newDate; } await this.fetchMealPlan(); this.renderPlannerView(); },
        async renderPlannerItemsAndTotals() { const dailyTotals = { calories: 0, protein: 0, carbs: 0, fat: 0, cost: 0 }; const mealElements = { breakfast: '', lunch: '', dinner: '', snacks: '' }; for (const item of this.state.mealPlan) { let itemTotals, itemName, itemImage; if (item.recipe_id) { const recipe = this.state.recipes.find(r => r.id === item.recipe_id); if (!recipe) continue; itemTotals = this.calculateRecipeTotals(recipe.ingredients); itemName = item.recipe_name; itemImage = item.recipe_image; } else if (item.ingredient_id) { itemTotals = this.calculateRecipeTotals([{ ...item, id: item.ingredient_id, quantity: item.quantity_grams }]); itemName = `${item.ingredient_name} (${item.quantity_grams}g)`; itemImage = item.ingredient_image; } else { continue; } Object.keys(dailyTotals).forEach(key => dailyTotals[key] += itemTotals[key] || 0); const mealKey = item.meal_type.toLowerCase(); if (mealElements[mealKey] !== undefined) { mealElements[mealKey] += `<div class="meal-item" data-id="${item.id}"><img src="${itemImage || '/default-recipe.png'}" alt="${itemName}"><div class="meal-item-details"><div class="meal-item-name">${itemName}</div><div class="meal-item-macros">C: ${itemTotals.calories.toFixed(0)} | P: ${itemTotals.protein.toFixed(1)}g | C: ${itemTotals.carbs.toFixed(1)}g | F: ${itemTotals.fat.toFixed(1)}g | Cost: ₹${itemTotals.cost.toFixed(2)}</div></div><button class="remove-btn" data-id="${item.id}">&times;</button></div>`; } } document.getElementById('daily-totals').innerHTML = `<div class="total-card"><div class="value">${dailyTotals.calories.toFixed(0)}</div><div class="label">Calories</div></div><div class="total-card"><div class="value">${dailyTotals.protein.toFixed(1)}g</div><div class="label">Protein</div></div><div class="total-card"><div class="value">${dailyTotals.carbs.toFixed(1)}g</div><div class="label">Carbs</div></div><div class="total-card"><div class="value">${dailyTotals.fat.toFixed(1)}g</div><div class="label">Fat</div></div><div class="total-card"><div class="value cost">₹${dailyTotals.cost.toFixed(2)}</div><div class="label">Total Cost</div></div>`; Object.keys(mealElements).forEach(key => { const el = document.getElementById(`meal-${key}`); if (el) el.innerHTML = mealElements[key] || `<p style="color:var(--text-secondary); font-size:0.9rem;">No items added.</p>`; }); document.querySelectorAll('.remove-btn').forEach(btn => btn.addEventListener('click', async e => { e.stopPropagation(); await this.api.send(`/api/meal-planner/${e.target.dataset.id}`, 'DELETE'); await this.fetchMealPlan(); this.renderPlannerItemsAndTotals(); })); },
        showAddItemToMealModal(meal_type) { this.showModal(`<h2>Add to ${meal_type}</h2><div class="input-group"><label>Select Item</label><select id="meal-item-select"><option value="">-- Select --</option><optgroup label="Recipes">${this.state.recipes.map(r => `<option value="recipe-${r.id}">${r.name}</option>`).join('')}</optgroup><optgroup label="Ingredients">${this.state.ingredients.map(i => `<option value="ingredient-${i.id}">${i.name}</option>`).join('')}</optgroup></select></div><div class="input-group" id="meal-item-qty-group" style="display:none;"><label>Quantity (g)</label><input id="meal-item-qty" type="number"></div><button id="add-item-to-meal-confirm" class="button">Add Item</button>`); const selectEl = document.getElementById('meal-item-select'), qtyGroup = document.getElementById('meal-item-qty-group'); selectEl.addEventListener('change', () => qtyGroup.style.display = selectEl.value.startsWith('ingredient-') ? 'block' : 'none'); document.getElementById('add-item-to-meal-confirm').addEventListener('click', async () => { const [item_type, item_id] = selectEl.value.split('-'); if (!item_type) return; const quantity = item_type === 'ingredient' ? parseFloat(document.getElementById('meal-item-qty').value) : null; if (item_type === 'ingredient' && !(quantity > 0)) { alert("Please enter a valid quantity."); return; } await this.api.send('/api/meal-planner', 'POST', { date: this.state.plannerDate, meal_type, item_type, item_id, quantity }); this.closeModal(); await this.fetchMealPlan(); this.renderPlannerView(); }); },
        calculateRecipeTotals(ingredients) { return (ingredients || []).reduce((totals, item) => { const ingData = this.state.ingredients.find(i => i.id === (item.id || item.ingredient_id)); if (!ingData) return totals; const ratio = (item.quantity_grams || item.quantity) / (ingData.per_unit || 100); totals.calories += (ingData.calories || 0) * ratio; totals.protein += (ingData.protein || 0) * ratio; totals.carbs += (ingData.carbs || 0) * ratio; totals.fat += (ingData.fat || 0) * ratio; totals.cost += (ingData.price || 0) * ratio; return totals; }, { calories: 0, protein: 0, carbs: 0, fat: 0, cost: 0 }); },
        updateCardTheme(imageUrl, cardElement) { if (!imageUrl || !cardElement) return; const img = new Image(); img.crossOrigin = "Anonymous"; img.src = imageUrl; img.onload = () => { const [r, g, b] = this.colorThief.getColor(img); cardElement.querySelector('.card-content').style.setProperty('--card-bg', `rgba(${r}, ${g}, ${b}, 0.3)`); }; },
    };
    app.init();
});
